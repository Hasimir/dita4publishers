<project name="dita2kindle" default="dita2kindle"
  >
  
  <!-- test to see where the plugin is located, plugins or demo -->
  <dirname property="kindle.dir" file="${ant.file.dita2kindle}"/>
	
	<!-- Set this property to set the ePub URI stub to a useful value. -->
	<property name="idURIStub"
	  value="http://my-URI-stub/"/>

	<!-- The name of the directory, within the ePub package, to contain all images: -->
	<property name="images.output.dir" value="images"/>

	<!-- The name of the directory, within the ePub package, to contain all topics: -->
	<property name="topics.output.dir" value="topics"/>
	<!-- Controls debugging within the XSLTs. Set to "true" to turn on debugging: -->
	<property name="debug" value="false"/>
	
	<property name="kindle.temp.dir" value="${dita.temp.dir}${file.separator}kindle_temp"/>
	
	<!-- Defines the @class value to use for topic elements generated for topicheads. -->
	<property name="title.only.topic.class.spec" value="- topic/topic "/>
	
	<!-- Defines the @class value to use for topic title elements generated for topicheads. -->
	<property name="title.only.topic.title.class.spec" value="- topic/title "/>
	
	<!-- Leading portion of full EPUB publication ID to be appended to the publication ID -->
	<property name="kindle.pubid.uri.stub" value="http://my-URI-stub/"/>
	
	<property name="kindlegen.executable" value="kindlegen"/>
	<property name="kindlegenArgs" value=""/>
	
  <condition property="preprocess.maplink.skip" value="true">
	  <isset property="epub.exclude.auto.rellinks" />
  </condition>
  <condition property="preprocess.move-links.skip" value="true">
    <isset property="epub.exclude.auto.rellinks" />
  </condition>

	<target name="dita2kindle"
    unless="noMap"
    xmlns:dita="http://dita-ot.sourceforge.net"
		dita:depends="d4p.map-driven-build-init, build-init, preprocess,kindle"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction">
  </target>

	<target name="kindle"
    unless="noMap"
    depends="dita.map.kindle"/>
    
  <target name="dita.map.kindle.init"
    description="Init properties for Kindle">
    <condition property="out.ext" value=".html">
      <not>
        <isset property="out.ext" />
      </not>
    </condition>
    <condition property="noPlugin">
      <equals arg1="${dita.kindle.plugin}" arg2="no" />
    </condition>
    <condition property="css.output.dir" value="topics">
      <not>
        <isset property="args.css.output.dir" />
      </not>
    </condition>
    <condition property="css.output.dir" value="${args.css.output.dir}">
      <isset property="args.css.output.dir" />
    </condition>
  	<condition property="epub.hide.parent.link" value="yes">
  		<not>
      	<isset property="args.hide.parent.link" />
  		</not>
  	</condition>
  	<condition property="epub.hide.parent.link" value="${args.hide.parent.link}">
    	<isset property="args.hide.parent.link" />
  	</condition>
  </target>
  

  
  <target name="dita.map.kindle" depends="dita.map.kindle.init, kindle-copy-css" 
  	description="Generate all ePub components from input map and topics">
  	
  	<mkdir dir="${kindle.temp.dir}"/>
  	<makeurl file="${kindle.temp.dir}" property="kindle.xslt.outdir"/>
  	<makeurl file="${dita.temp.dir}" property="kindle.xslt.tempdir"/>
  	<makeurl file="${cover.graphic.file}" property="cover.graphic.uri" validate="false"/>
  	<echo message="[DEBUG] cover.graphic.uri=${cover.graphic.uri}"/>
  	
  	<property name="args.xsl" location="${kindle.dir}/xsl/map2kindle.xsl"/>

  	<echo message="[DEBUG] input file='${dita.temp.dir}${file.separator}${user.input.file}'"/>

    <xslt processor="trax"
      basedir="${dita.temp.dir}"
      destdir="${dita.temp.dir}"
      includesfile="${dita.temp.dir}${file.separator}user.input.file.list"
      classpathref="dost.class.path"
      style="${args.xsl}">
     	<param name="cssOutputDir" expression="${css.output.dir}"/>
      <param name="debug" expression="${debug}"/>
    	<param name="coverGraphicUri" expression="${cover.graphic.uri}" if="cover.graphic.file"/>
    	<param name="idURIStub" expression="${kindle.pubid.uri.stub}"/>
     	<param name="imagesOutputDir" expression="${images.output.dir}"/>
     	<param name="outdir" expression="${kindle.xslt.outdir}"/>
      <param name="outext" expression="${out.ext}"/><!-- Extension to use for result files, e.g., ".html" -->
     	<param name="tempdir" expression="${kindle.xslt.tempdir}"/>
    	<param name="rawPlatformString" expression="${os.name}"/>
    	<param name="titleOnlyTopicClassSpec" expression="${title.only.topic.class.spec}"/>
    	<param name="titleOnlyTopicTitleClassSpec" expression="${title.only.topic.title.class.spec}"/>
     	<param name="topicsOutputDir" expression="${topics.output.dir}"/>

    	<!-- Parameters from dita2xhtml and similar transtypes: -->   
      <param name="WORKDIR" expression="${workdir}" if="workdir"/>
      <param name="CSS" expression="${args.css.file}" if="args.css.file" />
      <param name="CSSPATH" expression="${user.csspath}" if="user.csspath" />
      <param name="DRAFT" expression="${args.draft}" if="args.draft"></param>
      <param name="ARTLBL" expression="${args.artlbl}" if="args.artlbl"></param>
      <param name="GENERATE-TASK-LABELS" expression="${args.gen.task.lbl}" if="args.gen.task.lbl"></param>
      <param name="PRESERVE-DITA-CLASS" expression="${args.xhtml.classattr}" if="args.xhtml.classattr"></param>
      <param name="NOPARENTLINK" expression="${epub.hide.parent.link}"/>
      <param name="BREADCRUMBS" expression="${args.breadcrumbs}" if="args.breadcrumbs"></param>
      <param name="INDEXSHOW" expression="${args.indexshow}" if="args.indexshow"></param>
    </xslt>
  	
  	<antcall target="kindle.copy.graphics"/>
  	
  	<antcall target="kindlegen"/>
  	
  </target>
  
  <target name="kindle.copy.graphics" 
	  description="Copies graphics from input to the ePub output directory based on the graphic map generated during kindle generation">
  	<ant antfile="${kindle.temp.dir}/copy-graphics.xml"  		
  		>
  	</ant>
	</target>
	
  <target name="kindle-copy-css"  description="Copy CSS files">    
    <condition property="user.copycss.yes">
      <isset property="args.css.present"/>
    </condition>
    <property name="user.csspath.real" value="${kindle.temp.dir}/${topics.output.dir}/${user.csspath}"/>
    <mkdir dir="${user.csspath.real}"/>    
    <!-- Always copy system default css files -->
    <copy todir="${user.csspath.real}">
      <fileset dir="${dita.resource.dir}" includes="*.css"/>
    </copy>    
    <!-- Copy user specify css file when required -->
    <antcall target="kindle-copy-css-user"/>
  </target>

  <target name="kindle-copy-css-user" if="user.copycss.yes">
    <copy file="${args.css.real}" todir="${user.csspath.real}"/>
  </target>
	<!-- executable required filename 
	     filename is hardcoded here in arg
	-->
	<target name="kindlegen">
		<echo message="+ [DEBUG] kindlegen.executable property = '${kindlegen.executable}'"/>
		<property name="kindle.result.filename" value="${dita.map.filename.root}.mobi"/>
	  <exec executable="${kindlegen.executable}" resultproperty="resultCode" failonerror="false">
	    <arg file="${kindle.temp.dir}/content.opf"/>
	  	<arg line="-o ${kindle.result.filename}"/>
	  	<arg line="${kindlegenArgs}"/>
	  </exec>
		<echo message="After kindlegen, result code is '${resultCode}'"/>
		<move todir="${output.dir}">
			<fileset dir="${kindle.temp.dir}">
				<include name="${kindle.result.filename}"/>
			</fileset>
		</move>
		<echo message="Result Kindle file is ${output.dir}${file.separator}${kindle.result.filename}"/>
	</target>

</project>
