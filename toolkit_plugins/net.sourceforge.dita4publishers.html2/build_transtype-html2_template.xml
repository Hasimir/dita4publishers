<project name="dita2html2" default="dita2html2"
  >
  
  <!-- test to see where the plugin is located, plugins or demo -->
  <dirname property="html2.dir" file="${ant.file.dita2html2}"/>
	
	<!-- The name of the directory, within the ePub package, to contain all images: -->
	<property name="images.output.dir" value="images"/>
	<!-- The name of the directory, within the ePub package, to contain all topics: -->
	<property name="topics.output.dir" value=""/>
	<!-- Controls debugging within the XSLTs. Set to "true" to turn on debugging: -->
	<property name="debug" value="false"/>
	
	<property name="html2.temp.dir" value="${dita.temp.dir}${file.separator}html2_temp"/>
	
	<!-- Defines the @class value to use for topic elements generated for topicheads. -->
	<property name="title.only.topic.class.spec" value="- topic/topic "/>
	
	<!-- Defines the @class value to use for topic title elements generated for topicheads. -->
	<property name="title.only.topic.title.class.spec" value="- topic/title "/>
	
	<target name="dita2html2"
    unless="noMap"
    xmlns:dita="http://dita-ot.sourceforge.net"
		dita:depends="build-init, preprocess,html2"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction">
  </target>
  
  <target name="html2"
    unless="noMap"
    depends="dita.map.html2"/>
	  
    
  <target name="dita.map.html2.init"
    description="Init properties for Epub">
    <basename property="dita.map.toc.root"
      file="${dita.input.filename}"
      suffix=".ditamap" />
    <condition property="args.html2.toc" value="${dita.map.toc.root}">
      <not>
        <isset property="args.html2.toc" />
      </not>
    </condition>
    <condition property="out.ext" value=".html">
      <not>
        <isset property="out.ext" />
      </not>
    </condition>
    <condition property="noPlugin">
      <equals arg1="${dita.html2.plugin}" arg2="no" />
    </condition>
    <condition property="css.output.dir" value="css">
      <not>
        <isset property="args.css.output.dir" />
      </not>
    </condition>
    <condition property="css.output.dir" value="${args.css.output.dir}">
      <isset property="args.css.output.dir" />
    </condition>
  	<echo message="css.output.dir='${css.output.dir}'"/>
  </target>
  

  
  <target name="dita.map.html2" depends="dita.map.html2.init, html2-copy-css" 
  	description="Generate all ePub components from input map and topics">
  	
  	<mkdir dir="${html2.temp.dir}"/>
  	<makeurl file="${output.dir}" property="html2.xslt.outdir"/>
  	<makeurl file="${dita.temp.dir}" property="html2.xslt.tempdir"/>
  	
  	<property name="map2html2.style" location="${html2.dir}/xsl/map2html2.xsl"/>
  	
    <xslt processor="trax"
      basedir="${dita.temp.dir}"
      destdir="${output.dir}"
      includesfile="${dita.temp.dir}${file.separator}user.input.file.list"
      classpathref="dost.class.path"
      style="${map2html2.style}">
     	<param name="cssOutputDir" expression="${css.output.dir}"/>
      <param name="debug" expression="${debug}"/>
      <param name="generateDynamicToc" expression="${html2.generate.dynamic.toc}"/>
      <param name="generateFrameset" expression="${html2.generate.frameset}"/>
      <param name="generateStaticToc" expression="${html2.generate.static.toc}"/>
     	<param name="imagesOutputDir" expression="${images.output.dir}"/>
     	<param name="outdir" expression="${html2.xslt.outdir}"/>
     	<param name="tempdir" expression="${html2.xslt.tempdir}"/>
    	<param name="rawPlatformString" expression="${os.name}"/>
    	<param name="titleOnlyTopicClassSpec" expression="${title.only.topic.class.spec}"/>
    	<param name="titleOnlyTopicTitleClassSpec" expression="${title.only.topic.title.class.spec}"/>
     	<param name="topicsOutputDir" expression="${topics.output.dir}"/>

    	<!-- Parameters from dita2xhtml and similar transtypes: -->   
      <param name="WORKDIR" expression="${workdir}" if="workdir"/>
      <param name="CSS" expression="${args.css.file}" if="args.css.file" />
      <param name="CSSPATH" expression="${user.csspath}" if="user.csspath" />
      <param name="DRAFT" expression="${args.draft}" if="args.draft"></param>
      <param name="ARTLBL" expression="${args.artlbl}" if="args.artlbl"></param>
      <param name="GENERATE-TASK-LABELS" expression="${args.gen.task.lbl}" if="args.gen.task.lbl"></param>
      <param name="PRESERVE-DITA-CLASS" expression="${args.xhtml.classattr}" if="args.xhtml.classattr"></param>
      <param name="NOPARENTLINK" expression="${args.hide.parent.link}" if="args.hide.parent.link"></param>
      <param name="BREADCRUMBS" expression="${args.breadcrumbs}" if="args.breadcrumbs"></param>
      <param name="INDEXSHOW" expression="${args.indexshow}" if="args.indexshow"></param>
    </xslt>
  	
  	<antcall target="html2.copy.graphics"/>
  	
  </target>
  
  <target name="html2.copy.graphics" 
	  description="Copies graphics from input to the output directory based on the graphic map generated during html2 generation">
  	<ant antfile="${output.dir}/copy-graphics.xml"  		
  		>
  	</ant>
	</target>
	
  <target name="html2-copy-css"  description="Copy CSS files" depends="dita.map.html2.init">    
    <condition property="user.copycss.yes">
      <isset property="args.css.present"/>
    </condition>
    <property name="user.csspath.real" value="${output.dir}${file.separator}${css.output.dir}"/>
    <mkdir dir="${user.csspath.real}"/>    
    <!-- Always copy system default css files -->
    <copy todir="${user.csspath.real}">
      <fileset dir="${dita.resource.dir}" includes="*.css"/>
    </copy>    
    <!-- Copy user specify css file when required -->
    <antcall target="html2-copy-css-user"/>
  </target>

  <target name="html2-copy-css-user" if="user.copycss.yes">
    <copy file="${args.css.real}" todir="${user.csspath.real}"/>
  </target>

</project>
