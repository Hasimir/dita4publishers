<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title>Customizing Page Layout and Page Sequences</title>
 <shortdesc>You can add new page masters and page sequences to the base set. You can also configure how topics are organized into page sequences. You can also control how different topic types generate page breaks.</shortdesc>
 <conbody>
  <p>The PDF-D4F transformation type defines a base set of page masters and corresponding page sequence masters. You can add additional page masters and page sequence masters by implementing templates in the modes <keyword>generateLayoutMasters</keyword> and <keyword>createPageSequenceMasters</keyword>, normally by matching on "/". If you need to override the details of the default page masters or page sequence masters you can override the templates <keyword>createDefaultLayoutMasters</keyword> or <keyword>createDefaultPageSequenceMasters</keyword> respectively.</p>
    <p>The details of the built-in page masters are defined by the attributes sets in <filepath>cfg/fo/attrs/layout-masters-attr.xsl</filepath>, in both the PDF-D4P plugin and the base PDF plugin.</p>
 </conbody>
  <concept
    id="concept_xqt_pib_jd">
    <title>Overview of XSL-FO Page Masters, Page Sequence Masters, and Page Sequences</title>
    <conbody>
      <p>An XSL-FO document consists of two main parts: the layout master set and one or more page sequences. The layout master set defines all the page masters and the page sequence masters that use the page masters. The page sequences contain the content to be paginated.</p>
      <p>The page masters determine the geometry and regions of each page (headers, footers, side regions, and body regions). The page sequence masters combine page masters into sequences based on page position within the sequence: first, not first, even, odd, last, etc. You control the details of page layout through the definition of page masters and page sequences. Overall page geometry is controlled through attribute sets that set the page size and margins. However, you may need to create more sophisticate page masters in order get specific effects, such as overlapping regions or something. In most cases the default page sequence masters are sufficient. Any new page masters you create must have a corresponding page sequence master in order to be useable from page sequences.</p>
      <p>Page sequences contain the actual content to be flowed. A page sequence is associated with a single page sequence master. The page sequence also defines how the pages within it will be numbered and whether or not it must start on an odd or even page. Each page sequence must start a new page.</p>
      <p>If you want pages with different page masters from preceding pages you must start a new page sequenceâ€”there is no way in XSL-FO to have different page masters assigned dynamically to arbitrary parts of the flow, so there's no way to say something like "if topic type X occurs within the flow, use page master Y". So you will need to create new page sequences for topic types that need a different page geometry than the pages that precede it (other than first/not-first pages, which is handled by the page sequence master).</p>
      <p>If you want different page numbering in different parts of the publication, for example, folio-by-chapter, then you must start new page sequences in order to reset the page numbering at 1 (and, with XSL-FO 1.1, define the folio prefix or suffix if that feature is supported by your FO engine).</p>
      <p>Note that you <b>do not</b> need distinct page masters or page sequences to get different effects within the body region of a page. For example, you can create unique chapter opener effects using fo:block or fo:block-container without the need for a specific page master for the first page as long as the page master otherwise provides an appropriately-sized body region. You also do not need new page sequences simply to cause page breaks: any fo:block can break to a new page, a new even page, or a new odd page.</p>
    </conbody>
  </concept>
  <concept
    id="concept_qrj_rib_jd">
    <title>PDF-D4P page sequence construction process</title>
    <conbody>
      <p>The construction of page sequences from the merged topic document involves the following main steps:<ol
        id="ol_pog_uib_jd">
        <li>The named template <keyword>createCoversAndInitialPages</keyword> constructs any pages that should be generated before the first content topic, e.g., front cover, inside front cover, title page, copyright page, etc.</li>
        <li>The named template <keyword>constructNavTreePageSequences</keyword> manages the generation of page sequences from the map's navigation tree (meaning the topicrefs that are not resource-only topicrefs).</li>
        <li>The named template <keyword>createIndex</keyword> manages the generation of any index pages (if the index was not generated by an explicit topicref in the navigation map).</li>
        <li>The named template <keyword>createLastPages</keyword> manages the generation of any pages that follow the navigation tree pages, such as a canned colophon or back cover.</li>
        </ol></p>
      <p>The named template <keyword>constructNavTreePageSequences</keyword> applies templates in the mode <keyword>constructNavTreePageSequences</keyword>. The default template for "/" in that mode then does the actual work of constructing the page sequences. This lets you override the default processing by providing a template that matches "/", although that shouldn't normally be necessary unless you want to change things in a radical way.</p>
      <p>The default page sequence construction process proceeds as follows:<ol
        id="ol_ggq_bkb_jd">
        <li>The mode <keyword>getTopLevelTopicsOrRefs</keyword> is used to construct a list of the topics or topicrefs (when there is no corresponding topic) that are top-level topics, meaning they are candidates for starting new page sequences. Note that being a top-level topic does not <i>require</i> a topic or topicref to start a new page sequence, it only gives it the opportunity to do so.  You can have a single page sequence contain multiple top-level topics. By default, any topic whose topicref has no parent topicref or topichead is a top-level topics. Any topics identified as front or back cover topics are excluded from this set (see the discussion of cover generation).</li>
        <li>The list of top-level topics is processed in the mode <keyword>mapTopicsToType</keyword> in order to create a map of topics to their "topic type", where the topic type is whatever you want it to be, but by default is either the topic tagname (e.g., "concept") or the topicref type (if specialized), given an initial capital and prepended with "topic", e.g. "topicChapter" or "topicConcept". You can implement templates in the <keyword>mapTopicsToType</keyword> mode in order to define the topic types yourself, for example, to reflect semantics of a custom map type.<p>This phase is necessary because the determination of topic type cannot be made during the merging phase because at merge time you don't yet know the topicref context of each topic, which you need in order to have topic type be determined by topicref type.</p><p>The result if this set is a sequence of <codeph>&lt;dita-ot:topicToTypeMapItem></codeph> elements. Each item specifies the topic type and the ID value of the topic it applies to.</p></li>
        <li>The sequence of topicToTypeMapItem elements is in order to map items to "publication regions", where each publication region will get its own page sequence. Publication regions correspond to things like frontmatter, body, appendices, backmatter, etc. You can define your own publication regions and associate them by implementing templates in the mode <keyword>getPublicationRegion</keyword>. The templates in this mode simply return the string name of the publication region to use. All the adjacent elements with the same publication region will go in a single page sequence.<p>The result of this phase is a sequence of <codeph>&lt;dita-ot:pageSequence></codeph> elements, one for each distinct publication region group, each element containing the topics in the group. The <codeph>&lt;dita-ot:pageSequence></codeph>  elements have a <codeph>@pubRegion</codeph> attribute that specifies the publication region for that page sequence. The elements are "page sequence generators" as they directly drive the creation of the actual XSL-FO page sequence elements in the FO output.</p></li>
        <li>The sequence of <codeph>&lt;dita-ot:pageSequence></codeph> elements is processed in the <keyword>constructPageSequence</keyword>. Templates in this mode use templates of the form:<codeblock>  &lt;xsl:template mode="constructPageSequence" match="dita-ot:pageSequence[@pubRegion = 'frontmatter']" priority="10">
    &lt;xsl:call-template name="doPageSequenceConstruction">
      &lt;xsl:with-param name="pageSequenceMasterName" select="'front-matter-sequence'"/>
    &lt;/xsl:call-template>
  &lt;/xsl:template></codeblock><p>By default, otherwise unhandled publication regions use the body-sequence page sequence master. Any publication region name starting with "body" will be matched by the default "body" page sequence constructor. Thus you can generate names like "body:1", "body:2" and they will all use the body page sequence master but will generate separate page sequences (because the publication region names are different).</p><p>To map custom publication regions to XSL-FO page sequences or to override the default behavior, implement templates in the <keyword>constructPageSequence</keyword> mode.</p><p>The named template <keyword>doPageSequenceConstruction</keyword> processes the <codeph>&lt;dita-ot:pageSequence></codeph> element and takes as a parameter the name of the page sequence master to use.</p><p>The <keyword>doPageSequenceConstruction</keyword> then calls apply-templates on the <codeph>&lt;dita-ot:pageSequence></codeph>  element in the following modes:<dl>
          <dlentry>
            <dt><keyword>setInitialPageNumber</keyword></dt>
            <dd>Handles generation of the <codeph>@initial-page-number</codeph> attribute for the page sequence. By default, the first page sequence of the body sets the initial page number to "1", resetting page numbering for the body. You can override this mode if you need to change how page numbering is handled.</dd>
          </dlentry>
          <dlentry>
            <dt><keyword>constructStaticContent</keyword></dt>
            <dd>Handles generation of the static content for the page sequence. You can override this mode to change the set of static regions generated for a given page sequence. See <xref
              href="#concept_hcj_xlg_jd"
              format="dita"/> for more information.</dd>
          </dlentry>
          </dl></p><p>The <keyword>doPageSequenceConstruction</keyword> template then applies templates to all the top-level topics within the page sequence constructor in the mode <keyword>processTopLevelTopic</keyword>.</p></li>
        </ol></p>
      <p>If you map multiple topics to single page sequences, you may need to adjust the page break behavior for the topics.</p>
      <p>Given the above process, your configuration task depends on what you need to do:<ul
        id="ul_tnu_dqg_jd">
        <li>If you are using Bookmap and just want to control page break behavior, you can do that by overriding the code that sets the break-before property for the first block in a topic. See [XREF to topic on controlling topic page breaks].</li>
        <li>If you are implementing a custom map type or a generic map that needs to handle specialized topic types, but you want to use the built-in page sequences, then you only need to extend the topic-to-topic-type mapping by implementing templates in the <keyword>mapTopicsToType</keyword> mode and map your custom elements to the built-in topic types.</li>
        <li>If you need to implement new or different publication regions then you need to implement templates in the mode <keyword>getPublicationRegion</keyword>. If those publication regions need to map to specific page sequence masters or otherwise have customized page sequences, you must also implement templates in the mode <keyword>constructPageSequence</keyword>.</li>
        <li>If you want to modify the page numbering behavior, override templates in the mode <keyword>setInitialPageNumber</keyword>.</li>
        <li>If you want to modify the set of static content containers defined for a page sequence, override templates in the mode <keyword>constructStaticContent</keyword>.</li>
        <li>If you want to modify the static content itself, override the named templates defined in the base file <filepath>static-content.xsl</filepath> (see <xref
          href="#concept_hcj_xlg_jd"
          format="dita"/>).</li>
        </ul></p>
    </conbody>
  </concept>
  <concept
    id="concept_hcj_xlg_jd">
    <title>Defining Headers and Footers for Page Sequences (Static Content)</title>
    <conbody>
      <p>Headers and footers (and side regions if you need them) are constructed by using a combination of static text, page number references, and marker references within <codeph>&lt;fo:static-content></codeph> elements within <codeph>&lt;fo:page-sequence></codeph>. Within the body flow, you then set markers as needed, typically with the title of each chapter or first-level heading or whatever. </p>
      <p>The base file <filepath>static-content.xsl</filepath> defines a set of named templates that construct the static content for different publication regions (body, frontmatter, etc.). You can modify the header and footer details by overriding whichever of these templates constructs the part you need. You may also need to override the templates that set markers within the FO for each topic that needs to contribute to the static content.</p>
      <p>The <codeph>&lt;fo:static-content></codeph> elements for each page sequence are generated by templates applied to the <codeph>&lt;dita-ot:pageSequence></codeph> elements in the mode <keyword>constructStaticContent</keyword>. You can implement templates in this mode in order to customize the static content details for any page sequence.</p>
    </conbody>
  </concept>
</concept>
