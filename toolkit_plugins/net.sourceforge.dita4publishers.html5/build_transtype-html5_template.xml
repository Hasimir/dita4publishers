<project name="dita2html5" default="dita2html5"
  >

  <!-- test to see where the plugin is located, plugins or demo -->
  <dirname property="html5.dir" file="${ant.file.dita2html5}"/>


	<target name="dita2html5"
    unless="noMap"
    xmlns:dita="http://dita-ot.sourceforge.net"
		dita:depends="d4p.map-driven-build-init, build-init, preprocess, html5"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction">
  </target>

  <target name="html5"
    unless="noMap"
    depends="dita.map.html5"/>


  <target name="dita.map.html5.init"
    description="Init properties for HTML5">

    <property name="d4p.is.map.driven" value="true"/>

    <condition property="topics.output.dir" value="topics">
  		<not>
  			<isset property="topics.output.dir"/>
  	  </not>
  	</condition>

  	<!-- The name of the directory, within the output package, to contain all images: -->

    <condition property="images.output.dir" value="images">
  		<not>
    	  <isset property="images.output.dir" />
  		</not>
    </condition>

  	<property name="html5.temp.dir" value="${dita.temp.dir}${file.separator}html5_temp"/>

  	<!-- Defines the @class value to use for topic elements generated for topicheads. -->
  	<condition property="title.only.topic.class.spec" value="- topic/topic ">
  		<not>
    	  <isset property="title.only.topic.class.spec" />
  		</not>
  	</condition>

  	<!-- Defines the @class value to use for topic title elements generated for topicheads. -->
  	<condition property="title.only.topic.title.class.spec" value="- topic/title ">
  		<not>
    	  <isset property="title.only.topic.title.class.spec" />
  		</not>
  	</condition>

    <basename property="dita.map.toc.root"
      file="${dita.input.filename}"
      suffix=".ditamap" />

    <condition property="args.html5.toc" value="${dita.map.toc.root}">
      <not>
        <isset property="args.html5.toc" />
      </not>
    </condition>

    <condition property="out.ext" value=".html">
      <not>
        <isset property="out.ext" />
      </not>
    </condition>

    <condition property="noPlugin">
      <equals arg1="${dita.html5.plugin}" arg2="no" />
    </condition>

		<condition property="siteTheme" value="theme-01">
		  <not>
        <isset property="siteTheme" />
      </not>
		</condition>

    <condition property="css.output.dir" value="css">
      <not>
        <isset property="args.css.output.dir" />
      </not>
    </condition>

    <condition property="assets.output.dir" value="assets">
      <not>
        <isset property="assets.output.dir" />
      </not>
    </condition>

    <condition property="css.output.dir" value="${args.css.output.dir}">
      <isset property="args.css.output.dir" />
    </condition>

    <condition property="html5.doJavaScriptFileCopy">
    	<!-- For now just always do it. -->
  	  	<equals arg1="true" arg2="true"/>
   </condition>

    <condition property="html5.do.copy.graphics" value="true">
  		<not>
  			<isset property="html5.do.copy.graphics"/>
  	  </not>
  	</condition>


  	<echo message="+++ html5-specific properties:"/>
  	<echoproperties format="text" regex="^(html5|html2|css|user|out\.)" taskname="echo"/>
  </target>

  <target name="dita.map.html5" depends="dita.map.html5.init, html5.compress.assets, html5-copy-assets, html5-copy-dyntoc-javascript"
  	description="Generate all ePub components from input map and topics">

  	<mkdir dir="${html5.temp.dir}"/>
  	<makeurl file="${output.dir}" property="html5.xslt.outdir"/>
  	<makeurl file="${dita.temp.dir}" property="html5.xslt.tempdir"/>

  	<property name="map2html5.style" location="${html5.dir}/xsl/map2html5.xsl"/>
  	<property name="args.xhtml.toc" value="index"/>

    <xslt processor="trax"
      basedir="${dita.temp.dir}"
      destdir="${output.dir}"
      includesfile="${dita.temp.dir}${file.separator}user.input.file.list"
      classpathref="dost.class.path"
      style="${map2html5.style}"
      filenameparameter="inputFileNameParam"

    	>
      <param name="siteTheme" expression="${siteTheme}"/>
     	<param name="cssOutputDir" expression="${css.output.dir}"/>
      <param name="debug" expression="${debug}"/>
    	<param name="fileOrganizationStrategy" expression="${html2.file.organization.strategy}" if="html2.file.organization.strategy"/>
      <param name="generateDynamicToc" expression="${html5.generate.dynamic.toc}" if="html5.generate.dynamic.toc"/>
      <param name="generateStaticToc" expression="${html2.generate.static.toc}" if="html2.generate.static.toc"/>
    	<param name="generateGlossary" expression="${html2.generate.glossary}" if="html2.generate.glossary"/>
    	<param name="generateIndex" expression="${html2.generate.index}" if="html2.generate.index"/>
      <param name="mathJaxUseCDNLink" expression="${html2.mathjax.use.cdn.link}" if="html2.mathjax.use.cdn.link"/>
      <param name="mathJaxUseLocalLink" expression="${html2.mathjax.use.local.link}" if="html2.mathjax.use.local.link"/>
      <param name="mathJaxLocalJavascriptUri" expression="${html2.mathjax.local.javascript.uri}" if="html2.mathjax.local.javascript.uri"/>
      <param name="imagesOutputDir" expression="${images.output.dir}"/>
     	<param name="outdir" expression="${html5.xslt.outdir}"/>
    	<!-- NOTE: Case of OUTEXT matches parameter used in base HTML transform type -->
    	<param name="OUTEXT" expression="${out.ext}"/><!-- Extension to use for result files, e.g., ".html" -->
     	<param name="tempdir" expression="${html5.xslt.tempdir}"/>
    	<param name="rawPlatformString" expression="${os.name}"/>
    	<param name="titleOnlyTopicClassSpec" expression="${title.only.topic.class.spec}"/>
    	<param name="titleOnlyTopicTitleClassSpec" expression="${title.only.topic.title.class.spec}"/>
     	<param name="topicsOutputDir" expression="${topics.output.dir}"/>

    	<!-- Parameters from dita2xhtml and similar transtypes: -->
      <param name="WORKDIR" expression="${workdir}" if="workdir"/>
      <param name="CSS" expression="${args.css.file}" if="args.css.file" />
      <param name="CSSPATH" expression="${user.csspath}" if="user.csspath" />
      <param name="DRAFT" expression="${args.draft}" if="args.draft"></param>
      <param name="ARTLBL" expression="${args.artlbl}" if="args.artlbl"></param>
      <param name="GENERATE-TASK-LABELS" expression="${args.gen.task.lbl}" if="args.gen.task.lbl"></param>
      <param name="PRESERVE-DITA-CLASS" expression="${args.xhtml.classattr}" if="args.xhtml.classattr"></param>
      <param name="NOPARENTLINK" expression="${args.hide.parent.link}" if="args.hide.parent.link"></param>
      <param name="BREADCRUMBS" expression="${args.breadcrumbs}" if="args.breadcrumbs"></param>
      <param name="INDEXSHOW" expression="${args.indexshow}" if="args.indexshow"></param>
    	<param name="OUTPUTDIR" expression="${output.dir}"/>
    	<param name="FILEDIR" expression="."/>
      <mapper type="glob"
              from="${user.input.file}"
              to="${args.xhtml.toc}${out.ext}" />
    </xslt>

  	<condition property="skip.copy.graphics" value="${local.skip.copy.graphics}">
  		<isset property="local.skip.copy.graphics"/>
  	</condition>

  	<antcall target="html5.copy.graphics">
  		<param name="do.copy.graphics"  value="${local.skip.copy.graphics}"/>
  	</antcall>
  </target>

  <target name="html5.copy.graphics" unless="skip.copy.graphics"
	  description="Copies graphics from input to the output directory based on the graphic map generated during html5 generation">
  	<ant antfile="${output.dir}/copy-graphics.xml"
  		>
  	</ant>
    </target>

  <target name="html5-copy-dyntoc-javascript"  description="Copy JavaScript files"
  	depends="dita.map.html5.init"
  	if="html5.doDynTocFileCopy">
  	<copy todir="${output.dir}">
  		<fileset dir="${html5.dir}/dynamic-toc-support">
  			<include name="**/*"/>
  		</fileset>
  	</copy>

	</target>

  <target name="html5-copy-css"  description="Copy CSS files" depends="dita.map.html5.init">
    <condition property="user.copycss.yes">
      <isset property="args.css.present"/>
    </condition>
    <property name="user.csspath.real" value="${output.dir}${file.separator}${css.output.dir}"/>
    <mkdir dir="${user.csspath.real}"/>
    <!-- Always copy system default css files -->
    <copy todir="${user.csspath.real}">
      <fileset dir="${dita.resource.dir}" includes="*.css"/>
    </copy>
    <copy todir="${output.dir}">
      <fileset dir="${dita.resource.dir}" includes="*.css"/>
    </copy>
  	<copy todir="${user.csspath.real}">
  		<fileset dir="${html5.dir}/css">
  			<include name="**/*"/>
  	  </fileset>
  	</copy>
    <!-- Copy user specify css file when required -->
    <antcall target="html5-copy-css-user"/>
    <antcall target="html5-copy-javascript"/>
  </target>

	<target name="html5.compress.assets">
		<ant antfile="${html5.dir}/assets/build.xml" dir="${html5.dir}/assets">

		</ant>
	</target>

  <target name="html5-copy-assets"  description="Copy assets files" depends="dita.map.html5.init">

    <property name="user.assetspath.real" value="${output.dir}${file.separator}${assets.output.dir}"/>

    <mkdir dir="${user.assetspath.real}"/>

    <!-- Always copy system default css files -->
    <copy todir="${user.assetspath.real}">
      <fileset dir="${html5.dir}/assets/css"/>
    </copy>

    <!-- Always copy system default js files -->
    <copy todir="${user.assetspath.real}">
      <fileset dir="${html5.dir}/assets/js"/>
    </copy>
  </target>

  <target name="html5-copy-css-user" if="user.copycss.yes">
    <copy file="${args.css.real}" todir="${user.csspath.real}"/>
  </target>


  <target name="html5-copy-javascript"  description="Copy JavaScript files"
    depends="dita.map.html5.init"
    if="html5.doJavaScriptFileCopy">
    <!-- FIXME: Parameterize the location of the JavaScript files -->
    <mkdir dir="${output.dir}/js"/>
    <copy todir="${output.dir}/js">
      <fileset dir="${html5.dir}/js">
        <include name="**/*"/>
      </fileset>
    </copy>

  </target>


</project>
