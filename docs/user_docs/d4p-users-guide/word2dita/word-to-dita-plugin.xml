<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "urn:pubid:dita4publishers.sourceforge.net:doctypes:dita:concept" "concept.dtd">
<concept id="conceptId">
 <title>Generating DITA from Documents (Word-to-DITA Transformation Framework)</title>
 <shortdesc>The DITA for Publishers Word-to-DITA framework is packaged as an Open Toolkit plugin.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Word-to-DITA transformation framework<indexterm>Open Toolkit plugin for</indexterm></indexterm>
        <indexterm>Open Toolkit plugins<indexterm>Word-to-DITA transform</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
 <conbody>
   <p>The Word-to-DITA transformation framework enables reliable generation of DITA maps and topics from styled Word documents. See <xref
      href="word2dita-intro.xml#chapter-id"
      format="dita"/> for details.</p>
    <p>To use the transformation as a Toolkit plugin simply deploy the DITA for Publishers Toolkit plugins to your Open Toolkit directory. The Word-to-DITA transformation type is "word2dita".</p>
    <p>The transformation type requires the following Ant parameters:<parml>
      <plentry>
        <pt><parmname>args.input</parmname></pt>
        <pd>The absolute path to the Word DOCX document to be transformed.</pd>
      </plentry>
      <plentry>
        <pt><parmname>w2d.style-to-tag-map</parmname></pt>
        <pd>The absolute path of the style-to-tag map document.</pd>
      </plentry>
      <plentry>
        <pt><parmname>w2d.root.output.filename</parmname></pt>
        <pd>The filename to use for the root output file (the root map or root topic depending on how your mapping is set up), e.g. "rootmap.ditamap".</pd>
      </plentry>
      <plentry>
        <pt><parmname>output.dir</parmname></pt>
        <pd>The absolute path of the directory to hold the generated DITA documents.</pd>
      </plentry>
      </parml></p>
    <p>The following parameters are optional:<parml>
      <plentry>
        <pt><parmname>w2d.clean.output.dir</parmname></pt>
        <pd>When set to "true" deletes any files in the output directory before running the generation.</pd>
      </plentry>
      <plentry>
        <pt><parmname>w2d.debug.xslt</parmname></pt>
        <pd>When set to "true" turns on debugging messages in the Word-to-DITA XSLT transform.</pd>
      </plentry>
      </parml></p>
    <p>You can set up an Ant script to run the transform against a specific Word document. A typical script looks like this:<codeblock>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;project name="Single Word Doc to Map and Topics 01" default="transformMyDoc">

  &lt;property file="build.properties"/>
  &lt;property file="${user.home}/.build.properties"/>
  &lt;property file="${user.home}/build.properties"/>
  
  &lt;!-- This property should be set in one of the included files above
       to reflect the location of Toolkit on your machine:
    -->
  &lt;property name="dita-ot-dir" location="c:\DITA-OT1.5"/>
  
  &lt;dirname property="myAntFile.dir" file="${ant.file}"/>
  
  &lt;tstamp/>
  
  &lt;target name="transformMyDoc">
    
    &lt;property name="word.doc" 
      location="${myAntFile.dir}/<b>word2dita_single_doc_to_map_and_topics_01.docx</b>"/>
    
    &lt;basename  property="doc.base.name" file="${word.doc}" suffix=".docx"/>
  
    &lt;ant antfile="${dita-ot-dir}/build.xml" target="dita2word2dita">
      &lt;!-- Set this to the filename of the DOCX file to be transformed: -->
      &lt;property name="args.input" 
        location="${word.doc}"/>
  
      &lt;!-- Change w2d.style-to-tag-map to point to your style-to-tag map document: -->
      &lt;property name="w2d.style-to-tag-map" 
          location="${myAntFile.dir}/<b>style2tagmap.xml</b>"/>
      
      
      &lt;property name="w2d.root.output.filename" 
          value="${doc.base.name}.ditamap"/>
      
      &lt;!-- Specify output.dir to set to the output directory to contain the generated DITA files: -->
      
      &lt;property name="output.dir" location="${myAntFile.dir}/../dita"/>
      &lt;property name="w2d.clean.output.dir" value="true"/>&lt;!-- Clean output directory before doing generation -->
      &lt;property name="w2d.debug.xslt" value="true"/>&lt;!-- Turn XSLT debug messages on -->
    &lt;/ant>
    &lt;ant antfile="${dita-ot-dir}/build.xml" target="dita2xhtml">
      &lt;property name="args.input" 
        location="${myAntFile.dir}/../dita/${doc.base.name}.ditamap"/>
    &lt;/ant>
  &lt;/target>  

&lt;/project></codeblock></p>
    <p>The text in bold is what you would change to reflect your documents.</p>
    <p>Note the initial <xmlelem>property</xmlelem> elements that import a file named <filepath>build.properties</filepath>. This approach lets you put this script anywhere and use the build.properties file to set the location of your Toolkit, defined in the Ant property <varname>dita-ot-dir</varname>. (See <xref
      href="w2d-getting-started.xml#conceptId"
      format="dita"/> for more details on this one-time setup task.)</p>
    <p>If you name this file <filepath>build.xml</filepath> in an appropriate directory (e.g., the same directory as the Word document), you can run this Ant script from the command line like so:<codeblock>c:\workspace\myworddoc\> <b>ant</b></codeblock></p>
    <p>You can also specify the Word document as a command-line parameter:<codeblock>c:\workspace\myworddoc\ > ant <b>-Dword.doc=c:/workspace/anotherworddoc/some-document.docx</b></codeblock></p>
    <p>TODO: It should be possible to use Ant to convert a set of documents in one go but I haven't worked out the details for that yet.</p>
    <p>If you want to get really sophisticated you can extend your Ant script to run the Toolkit against the DITA files you just generated, for example, to generate HTML as a way to validate the generated files. To do that you would add this <xmlelem>ant</xmlelem> element after the <xmlelem>ant</xmlelem> element that runs the Word-to-DITA transform:<codeblock>      &lt;ant antfile="${dita-ot-dir}/build.xml" target="dita2xhtml">
        &lt;property name="args.input" 
          location="${myAntFile.dir}/../dita/${doc.base.name}.ditamap"/>
      &lt;/ant></codeblock></p>
    <p>You can, of course, add any other normal Toolkit arguments you might want to add.</p>
 </conbody>
</concept>
