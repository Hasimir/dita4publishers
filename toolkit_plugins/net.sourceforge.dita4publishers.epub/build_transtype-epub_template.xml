<project name="dita2epub" default="dita2epub"
  >
  
  <!-- test to see where the plugin is located, plugins or demo -->
  <dirname property="epub.dir" file="${ant.file.dita2epub}"/>
	
	<!-- Set this property to set the ePub URI stub to a useful value. -->
	<property name="idURIStub"
	  value="http://my-URI-stub/"/>

	<!-- The name of the directory, within the ePub package, to contain all images: -->
	<property name="images.output.dir" value="images"/>
	<!-- The name of the directory, within the ePub package, to contain all topics: -->
	<property name="topics.output.dir" value="topics"/>
	<!-- Controls debugging within the XSLTs. Set to "true" to turn on debugging: -->
	<property name="debug" value="false"/>
	
	<property name="args.hide.parent.link" value="yes"/><!-- Turn off parent links in topics by default -->

	<property name="epub.temp.dir" location="${dita.temp.dir}/epub_temp"/>
	
  <target name="dita2epub"
    unless="noMap"
    xmlns:dita="http://dita-ot.sourceforge.net"
    dita:depends="build-init, preprocess, copy-css, dita.topics.xhtml, 
    dita.inner.topics.xhtml, dita.outer.topics.xhtml,epub"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction">
  </target>
  
  <target name="epub"
    unless="noMap"
    depends="dita.map.epub, zipepub"/>
  
  <target name="zipepub">
    <!-- Two steps because mimetype must go in first,
      uncompressed. Looks like ant puts later zipped files in
      first, so mimetype is in second zip task. -->
    <zip destfile="${output.dir}${file.separator}${dita.map.filename.root}.epub"
      basedir="${epub.temp.dir}"
      includes="META-INF${file.separator}container.xml,toc.ncx,
      content.opf,container.opf,**/*.html,**/*.css,**/*.HTML,**/*.CSS,
      **/*.jpg,**/*.gif,**/*.png,**/*.svg,**/*.JPG,**/*.GIF,**/*.PNG,**/*.SVG"/>
    
    <zip destfile="${output.dir}${file.separator}${dita.map.filename.root}.epub"
      basedir="${epub.temp.dir}"
      includes="mimetype"
      update="true"
      compress="false"/>
    
  </target>
  
    
  <target name="dita.map.epub.init" if="epub.plugin"
    depends="dita.map.epub.plugin.init">
    <antcall target="dita.map.epub.generate.plugin"/>
  </target>
  
  
  <target name="dita.map.epub.plugin.init"
    description="Init properties for Epub">
    <basename property="dita.map.toc.root"
      file="${dita.input.filename}"
      suffix=".ditamap" />
    <condition property="args.epub.toc" value="${dita.map.toc.root}">
      <not>
        <isset property="args.epub.toc" />
      </not>
    </condition>
    <condition property="out.ext" value=".html">
      <not>
        <isset property="out.ext" />
      </not>
    </condition>
    <condition property="noPlugin">
      <equals arg1="${dita.epub.plugin}" arg2="no" />
    </condition>
  </target>
  

  
  <target name="dita.map.epub" depends="dita.map.epub.init" 
  	description="Generate all ePub components from input map and topics">
  	<echo message=" [DEBUG] output.dir=${output.dir}"/>
    <echo message=" [DEBUG] dita.temp.dir=${dita.temp.dir}"/>
    <echo message=" [DEBUG] epub.temp.dir=${epub.temp.dir}"/>
  	
  	<mkdir dir="${epub.temp.dir}"/>
  	<makeurl file="${epub.temp.dir}" property="epub.xslt.outdir"/>
  	<makeurl file="${dita.temp.dir}" property="epub.xslt.tempdir"/>
  	
  	<property name="map2epub.style" location="${epub.dir}/xsl/map2epub.xsl"/>
    <xslt processor="trax"
      basedir="${dita.temp.dir}"
      destdir="${output.dir}"
      includes="${dita.input.filename}"
      classpathref="dost.class.path"
      style="${map2epub.style}">
     	<param name="outdir" expression="${epub.xslt.outdir}"/>
     	<param name="tempdir" expression="${epub.xslt.tempdir}"/>
     	<param name="imagesOutputDir" expression="${images.output.dir}"/>
     	<param name="topicsOutputDir" expression="${topics.output.dir}"/>
      <param name="debug" expression="${debug}"/>
    </xslt>
  	
  </target>
  
  <target name="copy.graphics" 
	  description="Copies graphics from input to the ePub output directory based on the graphic map generated during epub generation">
	</target>
</project>
